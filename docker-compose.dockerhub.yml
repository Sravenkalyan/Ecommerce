version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce_db
    environment:
      POSTGRES_DB: ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # E-commerce Application
  app:
    image: ${DOCKER_IMAGE:-yourusername/ecommerce-app:latest}
    container_name: ecommerce_app
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-password123}@postgres:5432/ecommerce
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      NODE_ENV: production
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - /app/node_modules
    command: >
      sh -c "
        echo 'Starting E-commerce Application...' &&
        echo 'Environment: production' &&
        echo 'Setting up database...' &&
        npx drizzle-kit push &&
        echo 'Seeding database...' &&
        npx tsx scripts/seed.ts &&
        echo 'Starting server...' &&
        cd /app && NODE_ENV=production node dist/server.js
      "
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

volumes:
  postgres_data: